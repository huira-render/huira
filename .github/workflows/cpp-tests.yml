name: C++ Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  test-and-coverage:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install lcov for coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
    
    - name: Set up build environment
      uses: ./.github/actions/setup
      with:
        platform: linux
    
    - name: Configure project with coverage
      uses: ./.github/actions/cmake-configure-test
      with:
        platform: linux
    
    - name: Build project
      uses: ./.github/actions/build
      with:
        platform: linux

    - name: Run tests and generate coverage
      shell: bash -el {0}
      run: |
        echo "Running tests and generating coverage report..."
        cd build
        cmake --build . --target coverage
        echo "Coverage generation completed!"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if tests fail
      with:
        name: test-results-linux
        path: build/test-results/*.xml
        retention-days: 30

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-linux
        path: build/coverage/
        retention-days: 30

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()  # Run even if tests fail
      with:
        name: Linux Test Results
        path: build/test-results/*.xml
        reporter: java-junit
        fail-on-error: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: build/coverage_filtered.info
        flags: unittests
        name: linux-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Coverage Summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f "build/coverage_filtered.info" ]; then
          # Extract coverage percentage from lcov info file
          COVERAGE=$(lcov --summary build/coverage_filtered.info 2>/dev/null | grep -oP 'lines\.*: \K[0-9.]+(?=%)')
          echo "Line Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "**Line Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "[View Full Coverage Report](../actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY
        else
          echo "Coverage report not generated" >> $GITHUB_STEP_SUMMARY
        fi