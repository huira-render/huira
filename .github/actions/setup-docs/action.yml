name: 'Setup Documentation Build Environment'
description: 'Set up the build environment with conda and dependencies'

inputs:
  platform:
    description: 'Target platforms: Linux, MacOS, MacOS-ARM, and Windows'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install system dependencies (Linux)
      if: inputs.platform == 'linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Install system dependencies (macOS)
      if: inputs.platform == 'macos' || inputs.platform == 'macos-arm'
      shell: bash
      run: |
        # macOS already has necessary build tools, but ensure cmake is available
        which cmake || brew install cmake
        which ninja || brew install ninja

    - name: Set up Visual Studio (Windows)
      if: inputs.platform == 'windows'
      uses: microsoft/setup-msbuild@v2

    # Set up Miniforge3 (faster than regular conda)
    - name: Setup Miniforge3
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-variant: Miniforge3
        miniforge-version: "23.11.0-0"  # Stable LTS-like version
        activate-environment: huira_env
        use-mamba: true
        channels: conda-forge
        conda-remove-defaults: true
        channel-priority: strict
        auto-update-conda: false
        show-channel-urls: true
      continue-on-error: true
      id: setup_conda

    # Fallback: Manual installation if the action fails
    - name: Manual Miniforge3 installation (fallback)
      if: steps.setup_conda.outcome == 'failure'
      shell: bash
      run: |
        echo "setup-miniconda failed, installing Miniforge3 manually..."
        
        case "${{ inputs.platform }}" in
          "linux")
            MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
            ;;
          "macos")
            MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-x86_64.sh"
            ;;
          "macos-arm")
            MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-arm64.sh"
            ;;
          "windows")
            echo "Cannot do manual installation on Windows, exiting..."
            exit 1
            ;;
        esac
        
        # Download and install
        curl -fsSL -o miniforge.sh "$MINIFORGE_URL"
        bash miniforge.sh -b -p $HOME/miniforge3
        
        # Add to PATH for subsequent steps
        echo "$HOME/miniforge3/bin" >> $GITHUB_PATH
        
        # Initialize
        source $HOME/miniforge3/bin/activate
        conda init bash

    # Cache conda environment
    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.CONDA }}/envs/huira_env
          ~/.conda/pkgs
        key: conda-env-v2-${{ runner.os }}-${{ inputs.platform }}-${{ hashFiles('dependencies/environment.yml', 'docs/docs-dependencies.yml') }}
        restore-keys: |
          conda-env-v2-${{ runner.os }}-${{ inputs.platform }}-

    # Install main project dependencies
    - name: Install main project dependencies
      shell: bash -el {0}  # Ensures conda environment is activated
      run: |
        echo "Installing main project dependencies from dependencies/environment.yml..."
        mamba env update -n huira_env -f dependencies/environment.yml
        
        echo "Installing additional build tools..."
        # Platform-specific build tools installation
        case "${{ inputs.platform }}" in
          "linux")
            echo "Using system CMake and ninja (already installed via apt)"
            ;;
          "macos")
            echo "Using system CMake and ninja for macOS x86_64 (installed via brew)"
            # Force architecture for conda packages to avoid ARM64 packages on x86_64
            export CONDA_SUBDIR=osx-64
            mamba install -y pkg-config
            ;;
          "macos-arm")
            echo "Installing macOS ARM64 build tools..."
            mamba install -y ninja pkg-config
            ;;
          "windows")
            echo "Installing Windows build tools..."
            mamba install -y cmake ninja pkg-config
            ;;
        esac

    # Install documentation dependencies
    - name: Install documentation dependencies
      shell: bash -el {0}  # Ensures conda environment is activated
      run: |
        echo "Installing documentation dependencies from docs/docs-dependencies.yml..."
        conda env update -f docs/docs-dependencies.yml

    # Fix ninja path issue for macOS x86_64
    - name: Remove conda ninja (macOS x86_64)
      if: inputs.platform == 'macos'
      shell: bash -el {0}
      run: |
        echo "Removing conda ninja to avoid architecture conflicts..."
        # Remove or rename conda ninja if it exists
        if [ -f "${CONDA_PREFIX}/bin/ninja" ]; then
          echo "Found conda ninja at ${CONDA_PREFIX}/bin/ninja, removing it..."
          rm -f "${CONDA_PREFIX}/bin/ninja"
        fi
        
        # Verify system ninja is available
        if ! which ninja > /dev/null 2>&1; then
          echo "System ninja not found, installing via brew..."
          brew install ninja
        fi
        
        echo "System ninja location: $(which ninja)"
        echo "System ninja version: $(ninja --version)"

    # Set environment variables for CMake to find conda packages
    - name: Set conda environment variables
      shell: bash -el {0}
      run: |
        echo "Setting up environment variables for CMake..."
        
        # Get conda environment path
        CONDA_PREFIX=$(conda info --base)/envs/huira_env
        
        # Set environment variables for the rest of the workflow
        echo "CMAKE_PREFIX_PATH=${CONDA_PREFIX}" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=${CONDA_PREFIX}/lib/pkgconfig" >> $GITHUB_ENV
        echo "CONDA_PREFIX=${CONDA_PREFIX}" >> $GITHUB_ENV
        
        # Platform-specific environment setup
        case "${{ inputs.platform }}" in
          "windows")
            echo "CMAKE_GENERATOR=Visual Studio 17 2022" >> $GITHUB_ENV
            echo "CMAKE_GENERATOR_PLATFORM=x64" >> $GITHUB_ENV
            ;;
          "macos")
            # For macOS x86_64, use system ninja and specify its path explicitly
            echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
            SYSTEM_NINJA_PATH=$(which ninja)
            echo "CMAKE_MAKE_PROGRAM=${SYSTEM_NINJA_PATH}" >> $GITHUB_ENV
            echo "Using system ninja at: ${SYSTEM_NINJA_PATH}"
            ;;
          *)
            echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
            ;;
        esac
        
        echo "Environment setup complete!"
        echo "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}"
        echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}"